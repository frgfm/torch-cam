[build-system]
requires = ["uv_build>=0.9.5,<0.10.0"]
build-backend = "uv_build"

[project]
name = "torchcam"
version = "0.5.0.dev0"
description = "Class activation maps for your PyTorch CNN models"
authors = [
    {name = "FranÃ§ois-Guillaume Fernandez", email = "fg-feedback@protonmail.com"}
]
readme = "README.md"
requires-python = ">=3.11,<4"
license = {file = "LICENSE"}
keywords = ["pytorch", "deep learning", "class activation map", "cnn", "gradcam"]
classifiers = [
    # https://pypi.org/classifiers/
    "Development Status :: 4 - Beta",
    "Environment :: GPU :: NVIDIA CUDA",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Image Processing",
    "Typing :: Typed",
]
dependencies = [
    # cf. https://github.com/frgfm/torch-cam/discussions/148
    "torch>=2.0.0,<3.0.0",
    "numpy>=1.17.2,<2.0.0",
    # cf. https://github.com/advisories/GHSA-98vv-pw6r-q6q4
    # cf. https://github.com/pytorch/vision/issues/4934
    # https://github.com/frgfm/Holocron/security/dependabot/5
    "Pillow>=8.4.0,!=9.2.0",
    "matplotlib>=3.7.0,<4.0.0",
]

[project.optional-dependencies]
test = [
    "requests>=2.20.0,<3.0.0",
    "torchvision>=0.15.0,<1.0.0",
    "pytest==8.4.1",
    "pytest-cov==6.2.1",
    "pytest-pretty==1.3.0",
]
quality = [
    "ruff==0.14.1",
    "ty==0.0.1a23",
    "types-Pillow",
    "pre-commit==4.3.0",
]
docs = [
    "sphinx>=3.0.0,!=3.5.0",
    "furo>=2022.3.4",
    "sphinxemoji>=0.1.8",
    "sphinx-copybutton>=0.3.1",
    "recommonmark>=0.7.1",
    "sphinx-markdown-tables>=0.0.15",
    # Indirect deps
    # cf. https://github.com/readthedocs/readthedocs.org/issues/9038
    "Jinja2<3.1",
]
demo = [
    "streamlit>=0.65.0,<2.0.0",
    "torchvision>=0.15.0,<1.0.0",
]


[project.urls]
documentation = "https://frgfm.github.io/torch-cam"
repository = "https://github.com/frgfm/torch-cam"
tracker = "https://github.com/frgfm/torch-cam/issues"
changelog = "https://frgfm.github.io/torch-cam/latest/changelog.html"

[tool.uv.build-backend]
module-name = "torchcam"
module-root = ""

[[tool.uv.index]]
name = "testpypi"
url = "https://test.pypi.org/simple/"
publish-url = "https://test.pypi.org/legacy/"
explicit = true

[tool.pytest.ini_options]
testpaths = ["torchcam/"]
addopts = "--cov=torchcam"

[tool.ruff]
line-length = 120
target-version = "py311"
preview = true

[tool.ruff.lint]
select = [  # https://docs.astral.sh/ruff/rules/
    "ERA",  # eradicate
    "FAST",  # FastAPI
    "YTT",  # flake8-2020
    "ANN",  # flake8-annotations
    "ASYNC",  # flake8-async
    "S",  # flake8-bandit
    "BLE",  # flake8-blind-except
    "B",  # flake8-bugbear
    "A",  # flake8-builtins
    "COM",  # flake8-commas
    "C4",  # flake8-comprehensions
    "CPY",  # flake8-copyright
    "DTZ",  # flake8-datetimez
    "T10",  # flake8-debugger
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "LOG",  # flake8-logging
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PYI",  # flake8-pyi
    "PT",  # flake8-pytest-style
    "Q",  # flake8-quotes
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SIM",  # flake8-simplify
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "FLY",  # flynt
    "I",  # isort
    "NPY",  # numpy
    "N",  # pep8-naming
    "PERF",  # perflint
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "DOC",  # pydoclint
    "D",  # pydocstyle
    "F",  # pyflakes
    "PGH",  # pygrep-hooks
    "PL",  # pylint
    "UP",  # pyupgrade
    "FURB",  # refurb
    "RUF",  # ruff specific
    "TRY",  # tryceratops
]
ignore = [
    "E501",  # line too long, handled by black
    "B904",  # raise from
    "C901",  # too complex
    "F403",  # star imports
    "E731",  # lambda assignment
    "C416",  # list comprehension to list()
    "ANN002",  # missing type annotations on *args
    "ANN003",  # missing type annotations on **kwargs
    "COM812",  # trailing comma missing
    "N812",  # lowercase imported as non-lowercase
    "ISC001",  # implicit string concatenation (handled by format)
    "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed
]
exclude = [".git"]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.lint.isort]
known-first-party = ["torchcam", "app"]
known-third-party = ["torch", "torchvision"]

[tool.ruff.lint.per-file-ignores]
"**/__init__.py" = ["I001", "F401", "CPY001", "D104"]
"scripts/**.py" = ["D", "T201", "N812", "S101", "ANN"]
".github/**.py" = ["D", "T201", "S602", "S101", "ANN"]
"docs/**.py" = ["E402", "D103", "ANN", "A001", "ARG001"]
"tests/**.py" = ["D103", "CPY001", "S101", "PT011", "ANN", "SLF001"]
"demo/**.py" = ["D103", "ANN"]
"setup.py" = ["T201"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.ty.environment]
python-version = "3.11"
python-platform = "linux"

[tool.ty.rules]
unresolved-import = "warn"
